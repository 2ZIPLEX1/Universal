import os
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from bot.utils.keyboards import get_create_bot_keyboard, get_my_bots_keyboard, get_add_bot_keyboard

logger = logging.getLogger(__name__)

async def bot_creation_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞"""
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    available_to_withdraw = 0
    earned_total = 0
    receipts_sold = 0
    checks_sold = 0
    
    creation_text = f"""üí∏ –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞

–í –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂–∞—Ö —á–µ–∫–æ–≤ –∏ PDF –∫–≤–∏—Ç–∞–Ω—Ü–∏–π. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –æ—Ç 1500 ‚ÇΩ

‚Äî –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {available_to_withdraw} ‚ÇΩ
–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {earned_total} ‚ÇΩ
–ü—Ä–æ–¥–∞–Ω–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–π: {receipts_sold}
–ü—Ä–æ–¥–∞–Ω–æ —á–µ–∫–æ–≤: {checks_sold}

‚Äî –ü—Ä–æ—Ü–µ–Ω—Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞:
–° 1 –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏: 70% c –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏
–° 1 —á–µ–∫–∞: 30% —Å —á–µ–∫–∞"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        photo_path = "static/images/bot_creation.jpg"
        if os.path.exists(photo_path):
            await update.message.reply_photo(
                photo=open(photo_path, 'rb'),
                caption=creation_text,
                reply_markup=get_create_bot_keyboard(available_to_withdraw),
                parse_mode="Markdown"
            )
        else:
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await update.message.reply_text(
                creation_text,
                reply_markup=get_create_bot_keyboard(available_to_withdraw),
                parse_mode="Markdown"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            creation_text,
            reply_markup=get_create_bot_keyboard(available_to_withdraw),
            parse_mode="Markdown"
        )

async def withdraw_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        text="üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏–Ω—è—Ç. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="create_bot")]]),
        parse_mode="Markdown"
    )

async def my_bots_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    bots_count = 0  # –ó–∞–≥–ª—É—à–∫–∞
    
    bots_text = f"""ü§ñ –°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –±–æ—Ç–æ–≤:
{"–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –±–æ—Ç–æ–≤" if bots_count == 0 else "–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –±–æ—Ç–æ–≤:"}"""
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        text=bots_text,
        reply_markup=get_my_bots_keyboard(),
        parse_mode="Markdown"
    )

async def add_bot_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    context.user_data["state"] = "waiting_bot_token"
    
    add_bot_text = """ü§ñ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
–¢—ã –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ —Ç–æ–∫–µ–Ω, –∑–∞—Ç–µ–º –ø—Ä–∏—Å–ª–∞—Ç—å –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç.
üìñ[–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±–æ—Ç–∞](https://core.telegram.org/bots#how-do-i-create-a-bot)"""
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        text=add_bot_text,
        reply_markup=get_add_bot_keyboard(),
        parse_mode="Markdown"
    )

async def process_bot_token(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞"""
    token = update.message.text.strip()
    
    await update.message.reply_text(
        "‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω! –í–∞—à –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç."
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if "state" in context.user_data:
        del context.user_data["state"]