import os
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from bot.utils.keyboards import get_info_keyboard
from db.models import Stats

logger = logging.getLogger(__name__)

async def info_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ (–¥–æ–±–∞–≤—å—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    users_count = 1
    total_checks = 0
    total_receipts = 0
    today_checks = 0
    today_receipts = 0
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ, –≤—ã –±—ã –ø–æ–ª—É—á–∞–ª–∏ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        stats = Stats.get_stats()
        users_count = stats["users_count"]
        total_checks = stats["total_checks"]
        total_receipts = stats["total_receipts"]
        today_checks = stats["today_checks"]
        today_receipts = stats["today_receipts"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    info_text = f"""üí´ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

–ö—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º—É - ""
–ò–Ω—Ñ–æ-–∫–∞–Ω–∞–ª - ""
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ - ""

-–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
 
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–∞—Ö: {users_count}
–ß–µ–∫–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {total_checks}
–ö–≤–∏—Ç–∞–Ω—Ü–∏–π –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {total_receipts}
–ß–µ–∫–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_checks}
–ö–≤–∏—Ç–∞–Ω—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_receipts}"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        photo_path = "static/images/info.jpg"
        if os.path.exists(photo_path):
            await update.message.reply_photo(
                photo=open(photo_path, 'rb'),
                caption=info_text,
                reply_markup=get_info_keyboard(),
                parse_mode="Markdown"
            )
        else:
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await update.message.reply_text(
                info_text,
                reply_markup=get_info_keyboard(),
                parse_mode="Markdown"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            info_text,
            reply_markup=get_info_keyboard(),
            parse_mode="Markdown"
        )