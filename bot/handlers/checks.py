import os
import logging
import io
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from bot.utils.keyboards import get_bank_keyboard, get_tinkoff_checks_keyboard, get_back_keyboard
from generators.screenshot.tinkoff import TinkoffScreenshotGenerator
from db.models import Transaction, Stats

logger = logging.getLogger(__name__)

async def checks_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞ –¥–ª—è —á–µ–∫–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        text="üí´ –í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å:",
        reply_markup=get_bank_keyboard("check"),
        parse_mode="Markdown"
    )

async def tinkoff_checks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é —á–µ–∫–æ–≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ"""
    query = update.callback_query
    await query.answer()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        text="üü° –¢-–ë–∞–Ω–∫ ‚Üí –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å:",
        reply_markup=get_tinkoff_checks_keyboard(),
        parse_mode="Markdown"
    )

async def process_tinkoff_balance_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ"""
    # –†–∞–∑–±–∏—Ä–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = update.message.text.strip().split('\n')
    
    if len(data) < 5:
        await update.message.reply_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
    variables = {
        "phoneTime": data[0],
        "userName": data[1],
        "cardBalance": data[2],
        "cardLastDigits": data[3],
        "monthlyExpenses": data[4],
        "cashbackAmount": data[5] if len(data) > 5 else "0"
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    try:
        generator = TinkoffScreenshotGenerator()
        screenshot_bytes = await generator.generate_balance_main(variables)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_id = update.effective_user.id
        Transaction.create(user_id, "check", -100, "Tinkoff balance screenshot")
        Stats.increment("check")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        await update.message.reply_photo(
            photo=io.BytesIO(screenshot_bytes),
            caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–ª–∞–Ω—Å–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ."
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}"
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if "state" in context.user_data:
        del context.user_data["state"]

async def tinkoff_balance_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ (–≥–ª–∞–≤–Ω–∞—è)"""
    query = update.callback_query
    await query.answer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    context.user_data["state"] = "waiting_tinkoff_balance_data"
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        text="""üü° –¢-–ë–∞–Ω–∫ ‚Üí –æ—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:

1Ô∏è‚É£ –í—Ä–µ–º—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
2Ô∏è‚É£ –ò–º—è –¥–µ—Ä–∂–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã
3Ô∏è‚É£ –ë–∞–ª–∞–Ω—Å –Ω–∞ –∫–∞—Ä—Ç–µ
4Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã
5Ô∏è‚É£ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü
‚ñ∂Ô∏è –ù–∞–∫–æ–ø–ª–µ–Ω–æ –∫—ç—à–±—ç–∫–∞ (–Ω–µ–æ–±.)

üëáüèª –ü—Ä–∏–º–µ—Ä –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:

20:27
–°–æ—Ñ–∏—è
5 500,50
1234
10 000
0""",
        reply_markup=get_back_keyboard("check_tinkoff"),
        parse_mode="Markdown"
    )

# –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ–∫–æ–≤
async def alfabank_checks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é —á–µ–∫–æ–≤ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        text="üÖ∞Ô∏è –ê–ª—å—Ñ–∞ –±–∞–Ω–∫ ‚Üí –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="checks")]]),
        parse_mode="Markdown"
    )

async def binance_checks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é —á–µ–∫–æ–≤ Binance"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        text="üî∂ Binance ‚Üí –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="checks")]]),
        parse_mode="Markdown"
    )

async def sberbank_checks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é —á–µ–∫–æ–≤ –°–±–µ—Ä–±–∞–Ω–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        text="üü¢ –°–±–µ—Ä–±–∞–Ω–∫ ‚Üí –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="checks")]]),
        parse_mode="Markdown"
    )

async def kaspi_checks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é —á–µ–∫–æ–≤ –ö–∞—Å–ø–∏"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        text="üçÅ –ö–∞—Å–ø–∏ ‚Üí –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="checks")]]),
        parse_mode="Markdown"
    )

async def vtb_checks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é —á–µ–∫–æ–≤ –í–¢–ë"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        text="üîµ –í–¢–ë ‚Üí –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="checks")]]),
        parse_mode="Markdown"
    )
async def checks_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞ –¥–ª—è —á–µ–∫–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: –∏–∑ callback –∏–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.callback_query:
        # –í—ã–∑–≤–∞–Ω–∞ –∏–∑ callback
        query = update.callback_query
        await query.answer()
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.edit_message_text(
                text="üí´ –í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å:",
                reply_markup=get_bank_keyboard("check"),
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(
                "üí´ –í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å:",
                reply_markup=get_bank_keyboard("check"),
                parse_mode="Markdown"
            )
    else:
        # –í—ã–∑–≤–∞–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            photo_path = "static/images/checks.jpg"
            if os.path.exists(photo_path):
                await update.message.reply_photo(
                    photo=open(photo_path, 'rb'),
                    caption="üí´ –í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å:",
                    reply_markup=get_bank_keyboard("check"),
                    parse_mode="Markdown"
                )
            else:
                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await update.message.reply_text(
                    "üí´ –í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å:",
                    reply_markup=get_bank_keyboard("check"),
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "üí´ –í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å:",
                reply_markup=get_bank_keyboard("check"),
                parse_mode="Markdown"
            )